<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <!--======================== Changes #1 ========================-->
    <changeSet id="1" author="viktorp">
        <comment>Changed companies.id type from long to int</comment>
        
        <sql splitStatements="false">
            ALTER TABLE companies ALTER COLUMN id SET DATA TYPE integer;
            ALTER TABLE contacts ALTER COLUMN company_id SET DATA TYPE integer;
            ALTER TABLE users ALTER COLUMN company_id SET DATA TYPE integer;

            CREATE SEQUENCE companies_id_seq OWNED BY companies.id;
            SELECT setval('companies_id_seq', coalesce(max(id), 0) + 1) FROM companies;
            ALTER TABLE companies ALTER COLUMN id SET DEFAULT nextval('companies_id_seq');
        </sql>
    </changeSet>

    <!--======================== Changes #2 ========================-->
    <changeSet id="2" author="viktorp">
        <comment>Changed systems_groups.id type from long to int</comment>
        
        <sql splitStatements="false">
            ALTER TABLE systems_groups ALTER COLUMN id SET DATA TYPE integer;
            ALTER TABLE systems ALTER COLUMN parent_id SET DATA TYPE integer;

            CREATE SEQUENCE systems_groups_id_seq OWNED BY systems_groups.id;
            SELECT setval('systems_groups_id_seq', coalesce(max(id), 0) + 1) FROM systems_groups;
            ALTER TABLE systems_groups ALTER COLUMN id SET DEFAULT nextval('systems_groups_id_seq');
        </sql>
    </changeSet>

    <!--======================== Changes #3 ========================-->
    <changeSet id="3" author="viktorp">
        <comment>Added version, created_at, updated_at to systems_groups</comment>
        
        <sql splitStatements="false">
            ALTER TABLE systems_groups RENAME COLUMN modified_date TO updated_at;
            ALTER TABLE systems_groups RENAME COLUMN modifiedby_id TO updated_by;
            
            ALTER TABLE systems_groups
                ADD COLUMN version integer NOT NULL DEFAULT 1,
                ADD COLUMN created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),
                ALTER COLUMN updated_at SET DEFAULT now();

            UPDATE systems_groups SET created_at = updated_at;

            CREATE FUNCTION systems_groups_before_save() RETURNS trigger AS $$
            BEGIN
                IF (TG_OP = 'INSERT') THEN
                    NEW.version := 1;
                    NEW.created_at := now();
                ELSE
                    NEW.version := OLD.version + 1;
                    NEW.created_at := OLD.created_at;
                END IF;
    
                NEW.updated_at := now();
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER systems_groups_before_save BEFORE INSERT OR UPDATE ON systems_groups
                FOR EACH ROW EXECUTE PROCEDURE systems_groups_before_save();
        </sql>
    </changeSet>

    <!--======================== Changes #4 ========================-->
    <changeSet id="4" author="viktorp">
        <comment>Set systems.id default to systems_id_seq; added NOT NULL constraints</comment>

        <sql splitStatements="false">
            SELECT setval('systems_id_seq', coalesce(max(id), 0) + 1) FROM systems;
            ALTER TABLE systems
                ALTER COLUMN id SET DEFAULT nextval('systems_id_seq'),
                ALTER COLUMN url SET NOT NULL,
                ALTER COLUMN parent_id SET NOT NULL,
                ALTER COLUMN title SET NOT NULL;
        </sql>
    </changeSet>

    <!--======================== Changes #5 ========================-->
    <changeSet id="5" author="viktorp">
        <comment>Added updated_by, version, created_at, updated_at to systems</comment>

        <sql splitStatements="false">
            ALTER TABLE systems ADD COLUMN updated_by integer;
            UPDATE systems SET updated_by = 1;
            
            ALTER TABLE systems
                ALTER COLUMN updated_by SET NOT NULL,
                ADD CONSTRAINT systems_updated_by FOREIGN KEY (updated_by) REFERENCES users (id),
                ADD COLUMN version integer NOT NULL DEFAULT 1,
                ADD COLUMN created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),
                ADD COLUMN updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now();

            CREATE FUNCTION systems_before_save() RETURNS trigger AS $$
            BEGIN
                IF (TG_OP = 'INSERT') THEN
                    NEW.version := 1;
                    NEW.created_at := now();
                ELSE
                    NEW.version := OLD.version + 1;
                    NEW.created_at := OLD.created_at;
                END IF;
    
                NEW.updated_at := now();
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER systems_before_save BEFORE INSERT OR UPDATE ON systems
                FOR EACH ROW EXECUTE PROCEDURE systems_before_save();
        </sql>
    </changeSet>

    <!--======================== Changes #6 ========================-->
    <changeSet id="6" author="viktorp">
        <comment>Changed roles.id type from long to int</comment>

        <sql splitStatements="false">
            ALTER TABLE roles ALTER COLUMN id SET DATA TYPE integer;
            ALTER TABLE roles_permissions ALTER COLUMN role_id SET DATA TYPE integer;

            CREATE SEQUENCE roles_id_seq OWNED BY roles.id;
            SELECT setval('roles_id_seq', coalesce(max(id), 0) + 1) FROM roles;
            ALTER TABLE roles ALTER COLUMN id SET DEFAULT nextval('roles_id_seq');
        </sql>
    </changeSet>

    <!--======================== Changes #7 ========================-->
    <changeSet id="7" author="viktorp">
        <comment>Added updated_by, version, created_at, updated_at to roles</comment>

        <sql splitStatements="false">
            ALTER TABLE roles ADD COLUMN updated_by integer;
            UPDATE roles SET updated_by = 1;

            ALTER TABLE roles
                ALTER COLUMN updated_by SET NOT NULL,
                ADD CONSTRAINT roles_updated_by FOREIGN KEY (updated_by) REFERENCES users (id),
                ADD COLUMN version integer NOT NULL DEFAULT 1,
                ADD COLUMN created_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),
                ADD COLUMN updated_at TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now();

            CREATE FUNCTION roles_before_save() RETURNS trigger AS $$
            BEGIN
                IF (TG_OP = 'INSERT') THEN
                    NEW.version := 1;
                    NEW.created_at := now();
                ELSE
                    NEW.version := OLD.version + 1;
                    NEW.created_at := OLD.created_at;
                END IF;
    
                NEW.updated_at := now();
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER roles_before_save BEFORE INSERT OR UPDATE ON roles
                FOR EACH ROW EXECUTE PROCEDURE roles_before_save();
        </sql>
    </changeSet>

    <!--======================== Changes #8 ========================-->
    <changeSet id="8" author="viktorp">
        <comment>Changed permissions.id type from long to int</comment>

        <sql splitStatements="false">
            ALTER TABLE permissions
                ALTER COLUMN id SET DATA TYPE integer,
                ALTER COLUMN parent_id SET DATA TYPE integer;
            ALTER TABLE roles_permissions ALTER COLUMN permission_id SET DATA TYPE integer;

            CREATE SEQUENCE permissions_id_seq OWNED BY permissions.id;
            SELECT setval('permissions_id_seq', coalesce(max(id), 0) + 1) FROM permissions;
            ALTER TABLE permissions ALTER COLUMN id SET DEFAULT nextval('permissions_id_seq');
        </sql>
    </changeSet>


    <!--===== This changeset MUST always be at the end of the file !!! =====-->
    <changeSet id="0" author="viktorp" runAlways="true">
        <comment>Ensure that admin user has proper rights on all tables</comment>
        
        <sql splitStatements="false">
            GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO admin;
            GRANT USAGE, SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA public TO admin;
        </sql>
    </changeSet>

</databaseChangeLog>
